---
import { getBlogDetail, getBlogs } from "../../lib/microcms";
import { formatDateJST } from "../../utils/date/formatDateJST";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { load } from "cheerio";
import { codeToHtml, bundledLanguages } from "shiki";
import { addCopyButton } from "shiki-transformer-copy-button";
import katex from "katex";

export async function getStaticPaths() {
  const { contents } = await getBlogs();
  return contents.map((blog) => ({
    params: { id: blog.id },
    props: { blog },
  }));
}

const { id } = Astro.params;
if (!id) {
  throw new Error('Blog ID is required');
}
const blog = await getBlogDetail(id);

const $ = load(blog.content || "");
const promises: Promise<void>[] = [];

let htmlContent = $.html();

// MathJAX記法の処理（ディスプレイ数式: $$...$$）
const displayMathRegex = /\$\$([^$]+)\$\$/g;
htmlContent = htmlContent.replace(displayMathRegex, (match: string, math: string) => {
  try {
    const cleanMath = math.replace(/<br\s*\/?>/gi, '');
    return katex.renderToString(cleanMath, { displayMode: true });
  } catch (error) {
    console.warn('KaTeX display math error:', error);
    return match;
  }
});

// MathJAX記法の処理（インライン数式: $...$）
const inlineMathRegex = /\$([^$\n]+)\$/g;
htmlContent = htmlContent.replace(inlineMathRegex, (match: string, math: string) => {
  try {
    return katex.renderToString(math, { displayMode: false });
  } catch (error) {
    console.warn('KaTeX inline math error:', error);
    return match;
  }
});

// 処理済みのHTMLを再度cheerioでロード
const $preProcessedHtml = load(htmlContent);

// コードブロックの処理
$preProcessedHtml('pre').each((_, elm) => {
  const codeElement = $preProcessedHtml(elm).find('code');
  const lang = codeElement.attr('class')?.replace('language-', '') || 'plaintext';
  
  if (lang === 'tex' || lang === 'latex') return;
  
  const code = codeElement.text();
  const supportedLang = bundledLanguages[lang as keyof typeof bundledLanguages] ? lang : 'plaintext'
  const promise = codeToHtml(code, {
    lang: supportedLang, 
    theme: "dark-plus", 
    transformers: [addCopyButton({ toggle: 3000 })], // コピーボタンを付与
  }).then((highlighted) => {
    $preProcessedHtml(elm).replaceWith(highlighted);
  });
  
  promises.push(promise);
});

await Promise.all(promises);
const formatedHtml = $preProcessedHtml.html();
---

<BaseLayout title={blog.title}>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css" integrity="sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X" crossorigin="anonymous" />
  <div class="mainContentInner">
    <div class="header">
      <h1 class="title">{blog.title}</h1>
      <p class="date">{formatDateJST(blog.publishedAt || '')}</p>
      {
        blog.eyecatch && (
          <picture class="eyecatch">
            <Image
                src={`${blog.eyecatch.url}?fm=webp&fit=fill&fill-color=dde0e4&w=840&h=441`}
                alt={blog.title}
                class="eyecatch"
                width={blog.eyecatch?.width || 840}
                height={blog.eyecatch?.height || 441}
                format="webp"
            />
          </picture>
        )
      }
    </div>
    <div class="content" set:html={formatedHtml} />
    <nav class="breadcrumb">
      <a href="/">← 記事一覧に戻る</a>
    </nav>
  </div>
</BaseLayout>

<style>
  .mainContentInner {
    box-sizing: border-box;
    display: block grid;
    grid-template-columns: 100%;
    gap: var(--spacing-8);
    inline-size: 100%;
    max-width: var(--container-size-md);
  }
</style>

<style is:global>
  .header {
    display: block grid;
    gap: var(--spacing-3);
    max-inline-size: inherit;
  }

  .title {
    font-size: var(--font-size-h2);
    line-height: 1.2;
  }

  .date {
    font-size: var(--font-size-small);
    color: var(--scarpa-flow);
  }

  .eyecatch img {
    width: 100%;
    height: auto;
  }

  .content {
    display: block;
    inline-size: 100%;
  }

  .content h2 {
    font-size: var(--font-size-h3);
    margin-block-start: 5.4rem;
  }

  .content h3 {
    font-size: var(--font-size-large);
    margin-block-start: 3.6rem;
  }

  .content h3 {
    font-size: var(--font-size-large);
    margin-block-start: 1.33rem;
  }

  .content p {
    margin-block-end: var(--spacing-3);
    margin: 1.8rem 0;
  }

  .content img {
    max-inline-size: 100%;
    height: auto;
    margin: var(--spacing-4) 0;
  }

  .content > *:first-child {
    margin-block-start: 0;
  }

  .content > *:last-child {
    margin-block-end: 0;
  }

  .content .shiki {
    padding: var(--spacing-3);
    overflow-x: auto;
    border-radius: var(--border-radius-small);
  }

  .content .katex-display{
    inline-size: 100%;
    overflow-x: auto;
    overflow-y: hidden;
    padding-block: 0.1rem;/* HACK: なぜかoverflow-xによって数式の上下が見切れてしまうのでpadding追加 */
  }

  .breadcrumb {
    max-inline-size: inherit;
    text-align: center;
  }

  .breadcrumb a {
    color: var(--bunker);
    text-decoration: none;
    font-size: var(--font-size-default);
    transition: color 0.2s ease;
    border-bottom: var(--is-hover-true, 1px solid var(--bunker))
            var(--is-hover-false, none);
  }
</style>
